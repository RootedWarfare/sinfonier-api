package com.sinfonier.{{ boltType }};

import java.util.Map;

import backtype.storm.task.OutputCollector;
import backtype.storm.task.ShellBolt;
import backtype.storm.task.TopologyContext;
import backtype.storm.topology.IRichBolt;
import backtype.storm.topology.OutputFieldsDeclarer;
import backtype.storm.tuple.Fields;
import backtype.storm.spout.ShellSpout;
import backtype.storm.spout.SpoutOutputCollector;
import backtype.storm.topology.IRichSpout;
import com.sinfonier.util.SinfonierUtils;
import backtype.storm.Config;

/**
 * PythonBolt Class.
 */
public class {{ boltName }} extends ShellSpout implements IRichSpout {

    private String mid;

    public {{ boltName }}(String spoutName, String xmlFile, String moduleid) {
        super("/usr/local/bin/python2.7", "{{ boltNamelowercase }}.py", xmlFile, spoutName, moduleid);
        mid = moduleid;

    }

    @SuppressWarnings("rawtypes")
    public void open(Map stormConf, TopologyContext context, SpoutOutputCollector collector) {
        SinfonierUtils.broadcastWorker((String) stormConf.get(Config.TOPOLOGY_NAME), context);

        Map<Integer, String> mapcontext = context.getTaskToComponent();
        String boltName = context.getComponentId(context.getThisTaskId());

        mapcontext.put(Integer.parseInt(mid), boltName);

        super.open(stormConf, context, collector);

    }

    @Override
    public void declareOutputFields(OutputFieldsDeclarer declarer) {
        declarer.declare(new Fields("entity", "map"));
    }

    @Override
    public Map<String, Object> getComponentConfiguration() {
        return null;
    }
}
